circular linked list source code
#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createnew(int data) {
    struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = data;
    newnode->next = newnode;  
    return newnode;
}

void insert_beginning(struct Node** head, int item) {
    struct Node* newnode = createnew(item);
    if (*head == NULL) {
        *head = newnode;
    } else {
        struct Node* temp = *head;
        while (temp->next != *head) {  
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->next = *head;  
        *head = newnode;
    }
}

void insert_end(struct Node** head, int data) {
    struct Node* newnode = createnew(data);
    if (*head == NULL) {
        *head = newnode;
    } else {
        struct Node* temp = *head;
        while (temp->next != *head) {  
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->next = *head;  
    }
}

void insert_at_position(struct Node** head, int data, int position) {
    struct Node* newnode = createnew(data);
    if (position == 1) {
        insert_beginning(head, data);
        return;
    }
    struct Node* temp = *head;
    for (int i = 1; i < position - 1 && temp->next != *head; i++) {
        temp = temp->next;
    }
    if (temp->next == *head) return;
    newnode->next = temp->next;
    temp->next = newnode;
}

void delete_by_value(struct Node** head, int key) {
    if (*head == NULL) return;
    struct Node* temp = *head;
    struct Node* prev = NULL;
    
    if (temp->data == key) {  
        if (temp->next == *head) { 
            free(temp);
            *head = NULL;
        } else {
            while (temp->next != *head) {
                temp = temp->next;
            }
            temp->next = (*head)->next;
            free(*head);
            *head = temp->next;
        }
        return;
    }
    
    while (temp->next != *head && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == *head) return; 
    
    prev->next = temp->next;
    free(temp);
}

void delete_by_position(struct Node** head, int position) {
    if (*head == NULL) return;
    struct Node* temp = *head;
    struct Node* prev = NULL;
    
    if (position == 1) {  
        if (temp->next == *head) {  
            free(temp);
            *head = NULL;
        } else {
            while (temp->next != *head) {
                temp = temp->next;
            }
            temp->next = (*head)->next;
            free(*head);
            *head = temp->next;
        }
        return;
    }
    
    for (int i = 1; i < position && temp->next != *head; i++) {
        prev = temp;
        temp = temp->next;
    }
    
    if (temp->next == *head) return;  
    
    prev->next = temp->next;
    free(temp);
}

void display(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

int main() {
    struct Node* head = NULL;
    int choice, data, position;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at position\n");
        printf("4. Delete by value\n");
        printf("5. Delete by position\n");
        printf("6. Display\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                insert_beginning(&head, data);
                break;
            case 2:
                printf("Enter data: ");
                scanf("%d", &data);
                insert_end(&head, data);
                break;
            case 3:
                printf("Enter data: ");
                scanf("%d", &data);
                printf("Enter position: ");
                scanf("%d", &position);
                insert_at_position(&head, data, position);
                break;
            case 4:
                printf("Enter value to delete: ");
                scanf("%d", &data);
                delete_by_value(&head, data);
                break;
            case 5:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                delete_by_position(&head, position);
                break;
            case 6:
                display(head);
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
